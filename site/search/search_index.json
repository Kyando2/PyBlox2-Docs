{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyBlox2 v1.0.0-b0 documentation You can check out PyBlox2 on github . Blox Here are all the BloxTypes: PyBlox2.BloxClient PyBlox2.BloxUser PyBlox2.BloxGroup PyBlox2.BloxMember PyBlox2.BloxRank PyBlox2.BloxSettings","title":"Home"},{"location":"#pyblox2-v100-b0-documentation","text":"You can check out PyBlox2 on github .","title":"PyBlox2 v1.0.0-b0 documentation"},{"location":"#blox","text":"Here are all the BloxTypes: PyBlox2.BloxClient PyBlox2.BloxUser PyBlox2.BloxGroup PyBlox2.BloxMember PyBlox2.BloxRank PyBlox2.BloxSettings","title":"Blox"},{"location":"bloxclient/","text":"BloxClient PyBlox2.BloxClient Construction There are no required arguments to constructing a BloxClient. You can pass verbose=True to print additional information on the requests. Methods Methods not listed below are considered private BloxClient.connect(ROBLOSECURITY) ROBLOSECURITY must be your bot account's ROBLOSECURITY cookie. Puts the BloxClient in a connected state. async BloxClient.get_user(username) Where username is the name of the user. returns a BloxUser object. requires BloxClient to be in a connected state async BloxClient.get_group(id) Where id is the group's id. returns a BloxGroup object. requires BloxClient to be in a connected state async BloxClient.fetch() Fetches an attribute, attribute must be: [\"friend_requests\"] requires BloxClient to be in a connected state Decorator BloxClient.event Adds a coroutine as a listener for a callback event Possible callback events: [\"ready\", \"request\"] ( Those must be the name of the functions ) \"ready\" Called when the BloxClient.connect function has finished connecting \"request\" Called each time a request is made to the Roblox API Fetchables BloxClient has the following fetchable attributes: [\"friend_requests\"] Example import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): # do stuff pass client.connect(ROBLOSECURITY)","title":"BloxClient"},{"location":"bloxclient/#bloxclient","text":"","title":"BloxClient"},{"location":"bloxclient/#pyblox2bloxclient","text":"","title":"PyBlox2.BloxClient"},{"location":"bloxclient/#construction","text":"There are no required arguments to constructing a BloxClient. You can pass verbose=True to print additional information on the requests.","title":"Construction"},{"location":"bloxclient/#methods","text":"Methods not listed below are considered private","title":"Methods"},{"location":"bloxclient/#bloxclientconnectroblosecurity","text":"ROBLOSECURITY must be your bot account's ROBLOSECURITY cookie. Puts the BloxClient in a connected state.","title":"BloxClient.connect(ROBLOSECURITY)"},{"location":"bloxclient/#async-bloxclientget_userusername","text":"Where username is the name of the user. returns a BloxUser object. requires BloxClient to be in a connected state","title":"async BloxClient.get_user(username)"},{"location":"bloxclient/#async-bloxclientget_groupid","text":"Where id is the group's id. returns a BloxGroup object. requires BloxClient to be in a connected state","title":"async BloxClient.get_group(id)"},{"location":"bloxclient/#async-bloxclientfetch","text":"Fetches an attribute, attribute must be: [\"friend_requests\"] requires BloxClient to be in a connected state","title":"async BloxClient.fetch()"},{"location":"bloxclient/#decorator","text":"","title":"Decorator"},{"location":"bloxclient/#bloxclientevent","text":"Adds a coroutine as a listener for a callback event Possible callback events: [\"ready\", \"request\"] ( Those must be the name of the functions )","title":"BloxClient.event"},{"location":"bloxclient/#ready","text":"Called when the BloxClient.connect function has finished connecting","title":"\"ready\""},{"location":"bloxclient/#request","text":"Called each time a request is made to the Roblox API","title":"\"request\""},{"location":"bloxclient/#fetchables","text":"BloxClient has the following fetchable attributes: [\"friend_requests\"]","title":"Fetchables"},{"location":"bloxclient/#example","text":"import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): # do stuff pass client.connect(ROBLOSECURITY)","title":"Example"},{"location":"bloxgroup/","text":"BloxGroup PyBlox2.Groups.BloxGroup Construction Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxClient.get_group() Methods async BloxGroup.get_role(role_set_name) Returns a BloxRank object with the selected role_set_name. async BloxGroup.get_role(username) Returns a BloxMember object with the selected username. async BloxGroup.fetch() Fetches an attribute, attribute must be: [\"join_requests\", \"members\", \"settings\"] Fetchables BloxGroup has the following fetchable attributes: [\"join_requests\", \"members\", \"settings\"] Example import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): group = await client.get_group(5029105) await group.fetch(\"members\") print(group.members[0]) client.connect(ROBLOSECURITY)","title":"BloxGroup"},{"location":"bloxgroup/#bloxgroup","text":"","title":"BloxGroup"},{"location":"bloxgroup/#pyblox2groupsbloxgroup","text":"","title":"PyBlox2.Groups.BloxGroup"},{"location":"bloxgroup/#construction","text":"Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxClient.get_group()","title":"Construction"},{"location":"bloxgroup/#methods","text":"","title":"Methods"},{"location":"bloxgroup/#async-bloxgroupget_rolerole_set_name","text":"Returns a BloxRank object with the selected role_set_name.","title":"async BloxGroup.get_role(role_set_name)"},{"location":"bloxgroup/#async-bloxgroupget_roleusername","text":"Returns a BloxMember object with the selected username.","title":"async BloxGroup.get_role(username)"},{"location":"bloxgroup/#async-bloxgroupfetch","text":"Fetches an attribute, attribute must be: [\"join_requests\", \"members\", \"settings\"]","title":"async BloxGroup.fetch()"},{"location":"bloxgroup/#fetchables","text":"BloxGroup has the following fetchable attributes: [\"join_requests\", \"members\", \"settings\"]","title":"Fetchables"},{"location":"bloxgroup/#example","text":"import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): group = await client.get_group(5029105) await group.fetch(\"members\") print(group.members[0]) client.connect(ROBLOSECURITY)","title":"Example"},{"location":"bloxmember/","text":"BloxMember PyBlox2.BloxMember This class is a descendant of PyBlox2.BloxUser . Construction Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxGroup.get_member() Methods async BloxMember.set_role(role) Where role is a BloxRank. async BloxMember.kick() Kicks the user from the group. async BloxMember.fetch() Fetches an attribute, attribute must be: [\"friends\"] Fetchables BloxMember has the following fetchable attributes: [\"friends\"] Example import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): group = await client.get_group(5029105) member = await group.get_member(\"fego2015\") role = await group.get_role(\"Moderators\") await member.set_role(role) client.connect(ROBLOSECURITY)","title":"BloxMember"},{"location":"bloxmember/#bloxmember","text":"","title":"BloxMember"},{"location":"bloxmember/#pyblox2bloxmember","text":"This class is a descendant of PyBlox2.BloxUser .","title":"PyBlox2.BloxMember"},{"location":"bloxmember/#construction","text":"Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxGroup.get_member()","title":"Construction"},{"location":"bloxmember/#methods","text":"","title":"Methods"},{"location":"bloxmember/#async-bloxmemberset_rolerole","text":"Where role is a BloxRank.","title":"async BloxMember.set_role(role)"},{"location":"bloxmember/#async-bloxmemberkick","text":"Kicks the user from the group.","title":"async BloxMember.kick()"},{"location":"bloxmember/#async-bloxmemberfetch","text":"Fetches an attribute, attribute must be: [\"friends\"]","title":"async BloxMember.fetch()"},{"location":"bloxmember/#fetchables","text":"BloxMember has the following fetchable attributes: [\"friends\"]","title":"Fetchables"},{"location":"bloxmember/#example","text":"import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): group = await client.get_group(5029105) member = await group.get_member(\"fego2015\") role = await group.get_role(\"Moderators\") await member.set_role(role) client.connect(ROBLOSECURITY)","title":"Example"},{"location":"bloxranks/","text":"BloxRank PyBlox2.BloxRank Construction Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxGroup.get_role() . Attributes BloxRank.name BloxRank.rank BloxRank.member_count BloxRank.description BloxRank.members BloxRank.guild","title":"BloxRank"},{"location":"bloxranks/#bloxrank","text":"","title":"BloxRank"},{"location":"bloxranks/#pyblox2bloxrank","text":"","title":"PyBlox2.BloxRank"},{"location":"bloxranks/#construction","text":"Although it is possible to construct it, there is no reason to do so manually instead obtain it via BloxGroup.get_role() .","title":"Construction"},{"location":"bloxranks/#attributes","text":"","title":"Attributes"},{"location":"bloxranks/#bloxrankname","text":"","title":"BloxRank.name"},{"location":"bloxranks/#bloxrankrank","text":"","title":"BloxRank.rank"},{"location":"bloxranks/#bloxrankmember_count","text":"","title":"BloxRank.member_count"},{"location":"bloxranks/#bloxrankdescription","text":"","title":"BloxRank.description"},{"location":"bloxranks/#bloxrankmembers","text":"","title":"BloxRank.members"},{"location":"bloxranks/#bloxrankguild","text":"","title":"BloxRank.guild"},{"location":"bloxsettings/","text":"BloxSettings PyBlox2.BloxSettings Construction This class should absolutely never be constructed manually instead obtain it via the BloxGroup.settings fetchable. Attributes BloxSettings.is_approval_required BloxSettings.is_builders_club_required BloxSettings.are_enemies_allowed BloxSettings.are_group_games_visible BloxSettings.are_group_funds_visible","title":"BloxSettings"},{"location":"bloxsettings/#bloxsettings","text":"","title":"BloxSettings"},{"location":"bloxsettings/#pyblox2bloxsettings","text":"","title":"PyBlox2.BloxSettings"},{"location":"bloxsettings/#construction","text":"This class should absolutely never be constructed manually instead obtain it via the BloxGroup.settings fetchable.","title":"Construction"},{"location":"bloxsettings/#attributes","text":"","title":"Attributes"},{"location":"bloxsettings/#bloxsettingsis_approval_required","text":"","title":"BloxSettings.is_approval_required"},{"location":"bloxsettings/#bloxsettingsis_builders_club_required","text":"","title":"BloxSettings.is_builders_club_required"},{"location":"bloxsettings/#bloxsettingsare_enemies_allowed","text":"","title":"BloxSettings.are_enemies_allowed"},{"location":"bloxsettings/#bloxsettingsare_group_games_visible","text":"","title":"BloxSettings.are_group_games_visible"},{"location":"bloxsettings/#bloxsettingsare_group_funds_visible","text":"","title":"BloxSettings.are_group_funds_visible"},{"location":"bloxuser/","text":"BloxUser PyBlox2.BloxUser Construction Although it is possible to construct it, there is no reason to do so manually Obtain it via BloxClient.get_user() Methods async BloxUser.accept_friend_request() Accept the user's friend request if there is one. async BloxUser.decline_friend_request() Decline the user's friend request if there is one. async BloxUser.request_friendship() Sends the user a friend request. async BloxUser.unfriend() Unfriends the user. async BloxUser.follow() Follows the user. async BloxUser.unfollow() Unfollows the user. async BloxUser.block() Blocks the user. async BloxUser.unblock() Unblocks the user. async BloxUser.fetch() Fetches an attribute, attribute must be: [\"friends\"] Attributes BloxUser has the following fetchable attributes: [\"friends\"] Example import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): user = client.get_user(\"Roblox\") await user.fetch(\"friends\") print(user.friends) client.connect(ROBLOSECURITY)","title":"BloxUser"},{"location":"bloxuser/#bloxuser","text":"","title":"BloxUser"},{"location":"bloxuser/#pyblox2bloxuser","text":"","title":"PyBlox2.BloxUser"},{"location":"bloxuser/#construction","text":"Although it is possible to construct it, there is no reason to do so manually Obtain it via BloxClient.get_user()","title":"Construction"},{"location":"bloxuser/#methods","text":"","title":"Methods"},{"location":"bloxuser/#async-bloxuseraccept_friend_request","text":"Accept the user's friend request if there is one.","title":"async BloxUser.accept_friend_request()"},{"location":"bloxuser/#async-bloxuserdecline_friend_request","text":"Decline the user's friend request if there is one.","title":"async BloxUser.decline_friend_request()"},{"location":"bloxuser/#async-bloxuserrequest_friendship","text":"Sends the user a friend request.","title":"async BloxUser.request_friendship()"},{"location":"bloxuser/#async-bloxuserunfriend","text":"Unfriends the user.","title":"async BloxUser.unfriend()"},{"location":"bloxuser/#async-bloxuserfollow","text":"Follows the user.","title":"async BloxUser.follow()"},{"location":"bloxuser/#async-bloxuserunfollow","text":"Unfollows the user.","title":"async BloxUser.unfollow()"},{"location":"bloxuser/#async-bloxuserblock","text":"Blocks the user.","title":"async BloxUser.block()"},{"location":"bloxuser/#async-bloxuserunblock","text":"Unblocks the user.","title":"async BloxUser.unblock()"},{"location":"bloxuser/#async-bloxuserfetch","text":"Fetches an attribute, attribute must be: [\"friends\"]","title":"async BloxUser.fetch()"},{"location":"bloxuser/#attributes","text":"BloxUser has the following fetchable attributes: [\"friends\"]","title":"Attributes"},{"location":"bloxuser/#example","text":"import PyBlox2 ROBLOSECURITY = \"YOUR_ROBLOSECURITY\" client = PyBlox2.BloxClient(verbose=True) @client.event async def ready(ctx): user = client.get_user(\"Roblox\") await user.fetch(\"friends\") print(user.friends) client.connect(ROBLOSECURITY)","title":"Example"}]}